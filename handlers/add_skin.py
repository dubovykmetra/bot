from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from states.add_skin import AddSkin
from services.exchange import get_usd_exchange_rate
from services.skins_api import CSPriceChecker
from db.database import add_skin_to_db
from datetime import datetime
from keyboards.reply import date_choice_keyboard
#from aiogram.types import ReplyKeyboardRemove

checker = CSPriceChecker()
checker.load_skin_names() 

router = Router()

@router.message(lambda message: message.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–∫–∏–Ω" or message.text == "/add")
async def start_add_skin(message: types.Message, state: FSMContext):
    await state.clear()  # ‚Üê –û–ß–ò–°–¢–ö–ê –ü–†–ï–î–´–î–£–©–ò–• –°–û–°–¢–û–Ø–ù–ò–ô
    # current_state = await state.get_state()
    # await message.answer(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {current_state}")
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞:")
    await state.set_state(AddSkin.waiting_for_name)

@router.message(AddSkin.waiting_for_name)
async def process_name(message: types.Message, state: FSMContext):
    # current_state = await state.get_state()
    # await message.answer(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {current_state}")
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏ (–≤ $ –∏–ª–∏ –≥—Ä–Ω):")
    await state.set_state(AddSkin.waiting_for_price)

@router.message(AddSkin.waiting_for_price)
async def process_price(message: types.Message, state: FSMContext):
    # current_state = await state.get_state()
    # await message.answer(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {current_state}")
    user_data = await state.get_data()
    name = user_data["name"]
    rate = get_usd_exchange_rate()
    if message.text is None:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ü–µ–Ω–æ–π.")
        return
    text = message.text.replace(",", ".")

    try:
        if text.startswith("$"):
            purchase_price = float(text[1:])
        else:
            purchase_price = float(text) / rate
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥.")
        return
    
    print(f"–í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ {checker.find_price(name)}")

    market_price = checker.find_price(name)
    if market_price is None:
        await message.answer(
            f"‚ùå –°–∫–∏–Ω —Å –∏–º–µ–Ω–µ–º ¬´{name}¬ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∫–∏–Ω–∞:"
        )
        await state.clear()
        await state.set_state(AddSkin.waiting_for_name)
        return

    final_price = market_price * 0.95 * 0.95
    profit = (final_price - purchase_price * 1.042) / purchase_price * 100
    purchase_price *= 1.042

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ—Å–∏–º –¥–∞—Ç—É
    await state.update_data(
        purchase_price=purchase_price,
        market_price=market_price,
        final_price=final_price,
        profit=profit,
    )
    await message.answer(
        "–í—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é?",
        reply_markup=date_choice_keyboard
    )
    await state.set_state(AddSkin.waiting_for_date_choice)

@router.message(AddSkin.waiting_for_date_choice)
async def process_date_choice(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    await message.answer(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {current_state}")
    if message.text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
        purchase_date = datetime.now().strftime("%Y-%m-%d")
        await finalize_skin_add(message, state, purchase_date)
    elif message.text == "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        await state.set_state(AddSkin.waiting_for_date)
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")




@router.message(AddSkin.waiting_for_date)
async def process_date(message: types.Message, state: FSMContext):
    user_data = await state.get_data()
    date_text = message.text.strip()

    if date_text == "":
        purchase_date = datetime.now().strftime("%Y-%m-%d")
    else:
        try:
            dt = datetime.strptime(date_text, "%Y-%m-%d")
            purchase_date = dt.strftime("%Y-%m-%d")
        except ValueError:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º."
            )
            return

async def finalize_skin_add(message: types.Message, state: FSMContext, purchase_date: str):
    user_data = await state.get_data()
    name = user_data["name"]
    purchase_price = user_data["purchase_price"]
    market_price = checker.find_price(name)

    final_price = market_price * 0.95 * 0.95
    profit = (final_price - purchase_price) / purchase_price * 100

    add_skin_to_db(name, purchase_price, market_price, final_price, profit, purchase_date)

    await message.answer(
        f"‚úÖ –°–∫–∏–Ω: {name}\n"
        f"–î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {purchase_date}\n"
        f"–¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${purchase_price:.2f}\n"
        f"–¶–µ–Ω–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–µ: ${market_price:.2f}\n"
        f"–¶–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π: ${final_price:.2f}\n"
        f"{'üìà –í—ã–≥–æ–¥–∞' if profit > 0 else 'üìâ –£–±—ã—Ç–æ–∫'}: {profit:.2f}%"
    )
    await state.clear()
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–∫–∏–Ω–∞
    await state.set_state(AddSkin.waiting_for_name)
    
    # –ó–∞–Ω–æ–≤–æ –∑–∞–ø—É—Å–∫–∞–µ–º —Ü–∏–∫–ª
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–∫–∏–Ω–∞:")
