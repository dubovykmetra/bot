from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import sqlite3
from datetime import datetime
from states.get_skins import FilterByDate
from keyboards.reply import skin_list
from keyboards.reply import main_menu

router = Router()


@router.message(lambda message: message.text == "–ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–∏–Ω—ã –ø–æ –¥–∞—Ç–µ")
async def ask_date(message: types.Message, state: FSMContext):
    await state.clear()  # ‚Üê –û–ß–ò–°–¢–ö–ê –ü–†–ï–î–´–î–£–©–ò–• –°–û–°–¢–û–Ø–ù–ò–ô
    # current_state = await state.get_state()
    # await message.answer(f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—á–∏—Å—Ç–∫–∏: {current_state}")
   # await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
    await message.answer(
        "–í—ã —Ö–æ—Ç–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è—à–Ω—é—é –¥–∞—Ç—É –∏–ª–∏ –≤–≤–µ—Å—Ç–∏ —Å–≤–æ—é?",
        reply_markup=skin_list
    )
    await state.set_state(FilterByDate.waiting_for_datess)

    

@router.message(FilterByDate.waiting_for_datess)
async def process_date(message: types.Message, state: FSMContext):
    text = message.text.strip()
    conn = sqlite3.connect("skins.db")
    cursor = conn.cursor()

    if text == "üìÖ –°–µ–≥–æ–¥–Ω—è":
        date_text = datetime.now().strftime("%Y-%m-%d")
        cursor.execute(
            "SELECT name, purchase_price, market_price, final_price, profit_percent, purchase_date "
            "FROM skins WHERE purchase_date = ? ORDER BY purchase_date DESC",
            (date_text,)
        )
        rows = cursor.fetchall()

    elif text == "‚úçÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î:")
        await state.set_state(FilterByDate.waiting_for_manual_date)
        conn.close()
        return

    elif text == "–ó–∞ –≤—Å–µ –¥–Ω–∏":
        date_text = "–≤—Å–µ –¥–∞—Ç—ã"
        cursor.execute(
            "SELECT name, purchase_price, market_price, final_price, profit_percent, purchase_date "
            "FROM skins ORDER BY purchase_date DESC"
        )
        rows = cursor.fetchall()
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.")
        conn.close()
        return

    conn.close()

    if not rows:
        await message.answer(f"–°–∫–∏–Ω–æ–≤ –∑–∞ –¥–∞—Ç—É {date_text} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞–Ω–∫–∞–º–∏ –ø–æ 5
    CHUNK_SIZE = 5
    for i in range(0, len(rows), CHUNK_SIZE):
        chunk = rows[i:i + CHUNK_SIZE]
        response_lines = [f"–°–∫–∏–Ω—ã –∑–∞ {date_text}:\n"]
        for idx, row in enumerate(chunk, start=i + 1):
            name, purchase_price, market_price, final_price, profit_percent, purchase_date = row
            response_lines.append(
                f"{idx}. {name}\n"
                f"   –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {purchase_date}\n"
                f"   –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${purchase_price:.2f}\n"
                f"   –¶–µ–Ω–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–µ: ${market_price:.2f}\n"
                f"   –¶–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π: ${final_price:.2f}\n"
                f"   {'üìà –í—ã–≥–æ–¥–∞' if profit_percent > 0 else 'üìâ –£–±—ã—Ç–æ–∫'}: {profit_percent:.2f}%\n"
            )
        await message.answer("\n".join(response_lines))


# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.message(FilterByDate.waiting_for_manual_date)
async def process_manual_date(message: types.Message, state: FSMContext):
    date_text = message.text.strip()
    try:
        datetime.strptime(date_text, "%Y-%m-%d")  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î.")
        return

    conn = sqlite3.connect("skins.db")
    cursor = conn.cursor()
    cursor.execute(
        "SELECT name, purchase_price, market_price, final_price, profit_percent, purchase_date "
        "FROM skins WHERE purchase_date = ? ORDER BY purchase_date DESC",
        (date_text,)
    )
    rows = cursor.fetchall()
    conn.close()

    if not rows:
        await message.answer(f"–°–∫–∏–Ω–æ–≤ –∑–∞ –¥–∞—Ç—É {date_text} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —á–∞–Ω–∫–∞–º–∏ –ø–æ 5
    CHUNK_SIZE = 5
    for i in range(0, len(rows), CHUNK_SIZE):
        chunk = rows[i:i + CHUNK_SIZE]
        response_lines = [f"–°–∫–∏–Ω—ã –∑–∞ {date_text}:\n"]
        for idx, row in enumerate(chunk, start=i + 1):
            name, purchase_price, market_price, final_price, profit_percent, purchase_date = row
            response_lines.append(
                f"{idx}. {name}\n"
                f"   –î–∞—Ç–∞ –ø–æ–∫—É–ø–∫–∏: {purchase_date}\n"
                f"   –¶–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: ${purchase_price:.2f}\n"
                f"   –¶–µ–Ω–∞ –Ω–∞ –º–∞—Ä–∫–µ—Ç–µ: ${market_price:.2f}\n"
                f"   –¶–µ–Ω–∞ –ø–æ—Å–ª–µ –∫–æ–º–∏—Å—Å–∏–π: ${final_price:.2f}\n"
                f"   {'üìà –í—ã–≥–æ–¥–∞' if profit_percent > 0 else 'üìâ –£–±—ã—Ç–æ–∫'}: {profit_percent:.2f}%\n"
            )
    await message.answer("\n".join(response_lines), reply_markup=main_menu)
    await state.clear()  # –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
